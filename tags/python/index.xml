<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on /dev/ by Massimiliano Pippi</title>
    <link>https://dev.pippi.im/tags/python/</link>
    <description>Recent content in Python on /dev/ by Massimiliano Pippi</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 21 May 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://dev.pippi.im/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python Tooling at Scale: LlamaIndex’s Monorepo Overhaul</title>
      <link>https://dev.pippi.im/writing/python-tooling-at-scale/</link>
      <pubDate>Wed, 21 May 2025 00:00:00 +0000</pubDate>
      <guid>https://dev.pippi.im/writing/python-tooling-at-scale/</guid>
      <description>&lt;p&gt;&lt;strong&gt;This blog post was hosted in the LlamaIndex Blog, you can&#xA;&lt;a href=&#34;https://www.llamaindex.ai/blog/python-tooling-at-scale-llamaindex-s-monorepo-overhaul&#34;&gt;read it here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;When we talk about LlamaIndex, we’re actually referring to an ecosystem consisting of more than 650 Python packages,&#xA;mostly Integrations and Packs. All these packages share a single GitHub repository, what engineers fondly call a&#xA;“monorepo”. In this article, we’re going to introduce LlamaDev, our new tool for managing monorepos at scale, and&#xA;explain the challenges we ran into with existing tooling to get us to this point.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Turbo charge your template prompts with Banks</title>
      <link>https://dev.pippi.im/writing/turbo_charge_your_template_prompts_with_banks/</link>
      <pubDate>Tue, 13 Jun 2023 00:22:34 +0100</pubDate>
      <guid>https://dev.pippi.im/writing/turbo_charge_your_template_prompts_with_banks/</guid>
      <description>&lt;p&gt;Like many others, I&amp;rsquo;ve been playing with prompt engineering a lot lately and ended up with my very own prompt template&#xA;engine: &lt;a href=&#34;https://github.com/masci/banks&#34;&gt;Banks&lt;/a&gt;. Heavily based on Jinja2, the project isn&amp;rsquo;t really much more than a toy,&#xA;but inspired by &lt;a href=&#34;https://www.pinecone.io/learn/langchain-prompt-templates/&#34;&gt;this langchain tutorial&lt;/a&gt; from Pinecone,&#xA;I decided to take it out for a spin.&lt;/p&gt;&#xA;&lt;h2 id=&#34;a-basic-example&#34;&gt;A basic example&lt;/h2&gt;&#xA;&lt;p&gt;Working with a very basic example, Banks and Langchain don&amp;rsquo;t look very much different, let&amp;rsquo;s start with the latter:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rapid Prototyping Web Services in Python: make it, don&#39;t fake it!</title>
      <link>https://dev.pippi.im/writing/rapid-prototyping-web-services-python/</link>
      <pubDate>Sat, 05 Nov 2022 10:22:34 +0100</pubDate>
      <guid>https://dev.pippi.im/writing/rapid-prototyping-web-services-python/</guid>
      <description>&lt;figure&gt;&lt;img src=&#34;https://dev.pippi.im/images/mark-konig-1UMrSoItdDE-unsplash.jpg&#34; width=&#34;100%&#34;&gt;&lt;figcaption&gt;&#xA;      &lt;h4&gt;Photo by Mark König on Unsplash&lt;/h4&gt;&#xA;    &lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;From Wikipedia:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Rapid prototyping is a group of techniques used to quickly fabricate a scale model of a physical part&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;good-enough&#34;&gt;Good enough&lt;/h2&gt;&#xA;&lt;p&gt;Trying out a physical product for a fraction of its cost can be extremely effective, in fact we do&#xA;the same with software. We draw &lt;strong&gt;sketches&lt;/strong&gt; and &lt;strong&gt;wireframes&lt;/strong&gt; for websites or applications,&#xA;and sometimes they&amp;rsquo;re clickable; you can see legit data and images, the whole user experience closely&#xA;resembles the &amp;ldquo;real thing&amp;rdquo;. But it&amp;rsquo;s not as common to interact with a real web service at an early&#xA;stage of the prototyping process, let&amp;rsquo;s see why.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to deal with API clients, the lazy way - from code generation to release management</title>
      <link>https://dev.pippi.im/writing/how-to-deal-with-api-clients-the-lazy-way/</link>
      <pubDate>Thu, 05 Mar 2020 00:00:00 +0200</pubDate>
      <guid>https://dev.pippi.im/writing/how-to-deal-with-api-clients-the-lazy-way/</guid>
      <description>&lt;p&gt;&lt;strong&gt;This blog post was hosted in the Arduino Engineering Blog, you can&#xA;&lt;a href=&#34;https://blog.arduino.cc/2020/03/05/how-to-deal-with-api-clients-the-lazy-way-from-code-generation-to-release-management/&#34;&gt;read it here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;The Arduino IoT Cloud platform aims to make it very simple for anyone to develop&#xA;and manage IoT applications and its REST API plays a key role in this search for&#xA;simplicity. The IoT Cloud API at its core consists of a set of endpoints exposed&#xA;by a backend service, but this alone is not enough to provide a full-fledge&#xA;product to your users. What you need on top of your API service are:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cgo and Python</title>
      <link>https://dev.pippi.im/writing/cgo-and-python/</link>
      <pubDate>Mon, 16 Apr 2018 00:00:00 +0100</pubDate>
      <guid>https://dev.pippi.im/writing/cgo-and-python/</guid>
      <description>&lt;p&gt;&lt;strong&gt;This blog post was hosted in the Datadog Engineering Blog, you can&#xA;&lt;a href=&#34;https://www.datadoghq.com/blog/engineering/cgo-and-python/&#34;&gt;read it here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;If you look at the &lt;a href=&#34;https://github.com/DataDog/datadog-agent/&#34;&gt;new Datadog Agent&lt;/a&gt;,&#xA;you might notice most of the codebase is written in Go, although the checks we&#xA;use to gather metrics are still written in Python. This is possible because the&#xA;Datadog Agent, a regular Go binary, &lt;a href=&#34;https://docs.python.org/2/extending/embedding.html&#34;&gt;embeds&lt;/a&gt; a CPython interpreter that&#xA;can be called whenever it needs to execute Python code. This process can be made&#xA;transparent using an abstraction layer so that you can still write idiomatic Go&#xA;code even when there&amp;rsquo;s Python running under the hood.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Protobuf parsing in Python</title>
      <link>https://dev.pippi.im/writing/protobuf-python/</link>
      <pubDate>Thu, 08 Jun 2017 00:00:00 +0100</pubDate>
      <guid>https://dev.pippi.im/writing/protobuf-python/</guid>
      <description>&lt;p&gt;&lt;strong&gt;This blog post was hosted in the Datadog Engineering Blog, you can&#xA;&lt;a href=&#34;https://www.datadoghq.com/blog/engineering/protobuf-parsing-in-python/&#34;&gt;read it here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Recently we extended the &lt;a href=&#34;https://github.com/DataDog/dd-agent&#34;&gt;Datadog Agent&lt;/a&gt; to&#xA;support extracting additional metrics from Kubernetes using the&#xA;&lt;a href=&#34;https://github.com/kubernetes/kube-state-metrics&#34;&gt;kube-state-metrics&lt;/a&gt;&#xA;service. Metrics are exported through an HTTP API that supports&#xA;&lt;a href=&#34;https://en.wikipedia.org/wiki/Content_negotiation&#34;&gt;content negotiation&lt;/a&gt;&#xA;so that one can choose between having the response body in plain text format or&#xA;as a binary stream encoded using Protocol buffers.&lt;/p&gt;&#xA;&lt;p&gt;Binary formats are generally assumed to be faster and more efficient, but being&#xA;Datadog we wanted to see the data and quantify the improvement.  We hope the&#xA;results documented here will help save you time and improve performance in your&#xA;own code. But before we dive into our findings, let&amp;rsquo;s start with Protocol&#xA;buffers 101.&lt;/p&gt;</description>
    </item>
    <item>
      <title>If code is poetry, then documentation is prose</title>
      <link>https://dev.pippi.im/writing/if-code-is-poetry-then-documentation-is-prose/</link>
      <pubDate>Sat, 24 May 2014 00:00:00 +0000</pubDate>
      <guid>https://dev.pippi.im/writing/if-code-is-poetry-then-documentation-is-prose/</guid>
      <description>&lt;h2 id=&#34;what-is-poetry&#34;&gt;What is poetry?&lt;/h2&gt;&#xA;&lt;p&gt;Before starting, let’s agree on some terminology. Obviously poetry is a literary form, a way to write down things I would say,&#xA;but how do you recognize it, how can you say that is poetry and this is not? Well, according to my literary heritage (I’m italian)&#xA;something is poetry when it has verse, rhyme and stanza; let’s see what they are and how we can recognize them.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Uploading files to Google Cloud Storage with Django</title>
      <link>https://dev.pippi.im/writing/django-upload-on-google-cloud-storage/</link>
      <pubDate>Fri, 02 May 2014 00:00:00 +0000</pubDate>
      <guid>https://dev.pippi.im/writing/django-upload-on-google-cloud-storage/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;&#xA;&lt;p&gt;On of the features of &lt;a href=&#34;https://github.com/masci/django-appengine-toolkit&#34;&gt;Django Appengine Toolkit&lt;/a&gt; is simplifying&#xA;the work needed to configure Google Cloud Storage as a static files storage for Django applications running on&#xA;Google App Engine. Infact all you have to do is writing something like this in your settings.py module:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#cad3f5;background-color:#24273a;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    APPENGINE_TOOLKIT &lt;span style=&#34;color:#91d7e3;font-weight:bold&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6da95&#34;&gt;&amp;#39;APP_YAML&amp;#39;&lt;/span&gt;: os&lt;span style=&#34;color:#91d7e3;font-weight:bold&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#91d7e3;font-weight:bold&#34;&gt;.&lt;/span&gt;join(BASE_DIR, &lt;span style=&#34;color:#a6da95&#34;&gt;&amp;#39;app.yaml&amp;#39;&lt;/span&gt;),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6da95&#34;&gt;&amp;#39;BUCKET_NAME&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#a6da95&#34;&gt;&amp;#39;media-uploads&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    DEFAULT_FILE_STORAGE &lt;span style=&#34;color:#91d7e3;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6da95&#34;&gt;&amp;#39;appengine_toolkit.storage.GoogleCloudStorage&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    STATICFILE_STORAGE &lt;span style=&#34;color:#91d7e3;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6da95&#34;&gt;&amp;#39;appengine_toolkit.storage.GoogleCloudStorage&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;a-complete-example&#34;&gt;A complete example&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/masci/django_cloudstorage_example&#34;&gt;This repo&lt;/a&gt; contains a minimalistic Django project&#xA;implementing a file storage application that lets users upload, listing, retrieve and delete files. The project has just&#xA;one app implementing all the logic, defining the model and exposing the views. For detailed instructions on how to&#xA;setup a Django project on App Engine with &lt;code&gt;django-appengine-toolkit&lt;/code&gt; please check out&#xA;&lt;a href=&#34;http://dev.pippi.im/2014/02/10/create-a-blog-in-minutes-on-app-engine-with-django/&#34;&gt;this blog post&lt;/a&gt;.&#xA;Now let&amp;rsquo;s take a look at the code.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Create a blog in minutes on App Engine with Django and Cloud Sql</title>
      <link>https://dev.pippi.im/writing/create-a-blog-in-minutes-on-app-engine-with-django/</link>
      <pubDate>Mon, 10 Feb 2014 00:00:00 +0000</pubDate>
      <guid>https://dev.pippi.im/writing/create-a-blog-in-minutes-on-app-engine-with-django/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;&#xA;&lt;p&gt;Django was actively supported at an early stage of the Python runtime in App Engine SDK through the notable&#xA;&lt;a href=&#34;http://www.django-nonrel.org&#34;&gt;django-nonrel&lt;/a&gt; framework, a fork of the original project that adds support for NoSql databases.&#xA;But starting from the App Engine SDK 1.6.2, released more than two years ago, you can instead deploy Django&amp;rsquo;s official releases&#xA;and take advantages from the whole stack using Google Cloud Sql.&lt;/p&gt;&#xA;&lt;h2 id=&#34;case-study&#34;&gt;Case study&lt;/h2&gt;&#xA;&lt;p&gt;We&amp;rsquo;re going to setup a minimal project using &lt;a href=&#34;http://django-blog-zinnia.com/&#34;&gt;Zinnia&lt;/a&gt;, a blog engine built on top of Django and&#xA;a fairly complex web application that leverages several components of the framework, a good benchmark for showing how easy can&#xA;be deploying on App Engine.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Build GitHub like notifications with Django messages and AngularJS</title>
      <link>https://dev.pippi.im/writing/build-github-like-notifications-with-django-messages-and-angular-js/</link>
      <pubDate>Tue, 22 Oct 2013 00:00:00 +0000</pubDate>
      <guid>https://dev.pippi.im/writing/build-github-like-notifications-with-django-messages-and-angular-js/</guid>
      <description>&lt;h2 id=&#34;foreword&#34;&gt;Foreword&lt;/h2&gt;&#xA;&lt;p&gt;GitHub has a very nice notification system, very similar to a plain old email inbox. You receive a notification which&#xA;remains &lt;em&gt;unread&lt;/em&gt; until you actually read it; then it&amp;rsquo;s archived and removed from your &lt;em&gt;inbox&lt;/em&gt;, which it happens could remain empty:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://dev.pippi.im/images/github_notifications.png&#34; alt=&#34;github inbox&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;For those who don&amp;rsquo;t know, Django ships a library for displaying &amp;ldquo;one-time&amp;rdquo; messages to the users, it&amp;rsquo;s called &lt;em&gt;Message&#xA;Framework&lt;/em&gt; and you can find it in the &lt;code&gt;contrib&lt;/code&gt; package. Messages are &lt;em&gt;produced&lt;/em&gt; during users&amp;rsquo; activity and delivered&#xA;subsequently; in the meantime, they are stored in cookies or sessions.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
