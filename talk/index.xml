<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Talks on /dev/ by Massimiliano Pippi</title>
    <link>https://dev.pippi.im/talk/</link>
    <description>Recent content in Talks on /dev/ by Massimiliano Pippi</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 16 May 2024 15:06:44 +0000</lastBuildDate>
    <atom:link href="https://dev.pippi.im/talk/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Finding the needle: a deep dive into the rewriting of Haystack </title>
      <link>https://dev.pippi.im/talk/finding-the-needle/</link>
      <pubDate>Thu, 16 May 2024 15:06:44 +0000</pubDate>
      <guid>https://dev.pippi.im/talk/finding-the-needle/</guid>
      <description>&lt;p&gt;Haystack is an open-source framework. With Haystack you can compose various NLP tools to build applications, with a&#xA;particular focus on Large Language Models. Haystack was built before the “ChatGPT revolution”. Same as many others in&#xA;this industry, we had to question all the existing assumptions in order to adapt, and we had to do it fast.&lt;/p&gt;&#xA;&lt;p&gt;In this talk, we&amp;rsquo;ll explore the motivations behind the refactoring, the challenges we faced, and the outcomes achieved&#xA;through this intensive process. From rethinking many of the original abstractions, all the way up to growing a vibrant&#xA;community of users and contributors, we’ll share the key strategies and techniques employed during this journey.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Project Layout Patterns in Go</title>
      <link>https://dev.pippi.im/talk/project-layout-patterns-in-go/</link>
      <pubDate>Mon, 22 Oct 2018 11:30:00 +0000</pubDate>
      <guid>https://dev.pippi.im/talk/project-layout-patterns-in-go/</guid>
      <description>&lt;p&gt;You completed the tour, learned the language, got your pet project on Github.&#xA;Time to start a new project, a big one: how do you organize code, tests, docs?&#xA;During the talk I’ll try to save you some trial and error by sharing the lessons&#xA;learned during a year spent coding a non trivial Go project.&lt;/p&gt;&#xA;&lt;p&gt;There’s no silver bullet to organize a non trivial Golang project, only good&#xA;practices and experience. You can try different things but when the project gets&#xA;traction, with a lot of people involved, it might be difficult to change&#xA;strategy. You may look at what others do in bigger, well known projects but size&#xA;matters and you can’t just do “what they do at Kubernetes”.&#xA;During the talk I’ll show some lessons learned while building from the ground up&#xA;a Golang project that now has more than 600 source files, dozens of packages and&#xA;the tooling needed to build binaries, packages and Docker images.&lt;/p&gt;</description>
    </item>
    <item>
      <title>A Python and a Gopher Walk into a Bar - Embedding Python in Go</title>
      <link>https://dev.pippi.im/talk/a-python-and-a-gopher/</link>
      <pubDate>Tue, 24 Jan 2017 11:30:00 +0000</pubDate>
      <guid>https://dev.pippi.im/talk/a-python-and-a-gopher/</guid>
      <description>&lt;p&gt;Success stories about rewriting Python applications in Go are not big&#xA;news anymore. The pros and cons are well known, best practices are in&#xA;place, and the standard library is there to help.&lt;/p&gt;&#xA;&lt;p&gt;But what if you want to keep some of your Python code? When we chose&#xA;to port the Datadog Agent to Go, we needed to maintain support for our&#xA;existing library of plugins written in Python.&lt;/p&gt;&#xA;&lt;p&gt;During the talk we will share lessons learned from our experiences&#xA;with cgo, the GIL and the quest for performance as we bridge multiple&#xA;languages in a single application.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python - Go One Way</title>
      <link>https://dev.pippi.im/talk/python_go_one_way/</link>
      <pubDate>Fri, 04 Dec 2015 11:30:00 +0000</pubDate>
      <guid>https://dev.pippi.im/talk/python_go_one_way/</guid>
      <description>&lt;p&gt;Rumor has it recently that a growing number of Python developers are migrating to Go through an impressive series of success stories;&#xA;even if we don&amp;rsquo;t know the real numbers and it&amp;rsquo;s difficult to make a detailed picture of this phenomenon, the fact that Python&#xA;devs are interested in Go is out of the question, just go to some mailing list, blog or Twitter account and check out yourself.&lt;/p&gt;&#xA;&lt;p&gt;During the talk we will see what Go can offer that is so attractive for a Pythonista to make them migrate code, tools, behaviours.&#xA;We&amp;rsquo;ll also try to understand if this journey to the Land of Gophers can be one way or it&amp;rsquo;s better for a Python dev to buy the&#xA;return ticket in advance.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How we stopped using the mouse and started drawing molecules with our fingertips</title>
      <link>https://dev.pippi.im/talk/how_we_stopped_using_the_mouse_and_started_drawing_molecules_with_our_fingertips/</link>
      <pubDate>Tue, 06 Oct 2015 13:30:00 +0000</pubDate>
      <guid>https://dev.pippi.im/talk/how_we_stopped_using_the_mouse_and_started_drawing_molecules_with_our_fingertips/</guid>
      <description>&lt;p&gt;Porting to mobile a Qt desktop application that lets you draw molecules, crunches numbers, stores data, displays plot and graphs it’s something that goes far beyond converting a QWidget to a Qml component. You have to change user&amp;rsquo;s perspective, merging what they expect from a mobile application with what they expect from a scientific software. You have to&#xA;outsource heavy computational parts and data storage. You have to code from scratch components that don’t exist yet in the Qml ecosystem.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Django 1.7 on App Engine: it could work!</title>
      <link>https://dev.pippi.im/talk/django_17_app_engine/</link>
      <pubDate>Wed, 27 May 2015 11:06:44 +0000</pubDate>
      <guid>https://dev.pippi.im/talk/django_17_app_engine/</guid>
      <description>&lt;p&gt;Django was actively supported at an early stage of the Python runtime in App Engine SDK&#xA;through the notable django-nonrel framework, a fork of the original project that adds&#xA;support for NoSql databases. But starting from the App Engine SDK 1.6.2, released more&#xA;than two years ago, you can instead deploy Django’s official releases and take advantages&#xA;from the whole stack of the framework.&lt;/p&gt;&#xA;&lt;p&gt;In less than half an hour we’ll see how we can easily deploy the latest version of Django&#xA;on the Google Cloud Platform, taking advantage of the tools and services provided by&#xA;App Engine, Cloud SQL and Cloud Storage.&lt;/p&gt;</description>
    </item>
    <item>
      <title>If code is poetry, then documentation is prose</title>
      <link>https://dev.pippi.im/talk/code_is_poetry/</link>
      <pubDate>Sat, 24 May 2014 15:06:44 +0000</pubDate>
      <guid>https://dev.pippi.im/talk/code_is_poetry/</guid>
      <description>&lt;p&gt;Yes, code might be poetry, showing the elegance of the verses, rhythm, expressiveness;&#xA;but without good documentation that explains what it does, you will likely end up with&#xA;unsatisfied users or no users at all.&lt;/p&gt;&#xA;&lt;p&gt;If anyone had told me I would have spent more time writing documentation than coding,&#xA;I would not have believed it, but that was before I discovered a simple but powerful&#xA;law: “more documentation, more users, more contributors”.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Se il codice è poesia, la documentazione è prosa</title>
      <link>https://dev.pippi.im/talk/codice_poesia/</link>
      <pubDate>Sat, 24 May 2014 15:06:44 +0000</pubDate>
      <guid>https://dev.pippi.im/talk/codice_poesia/</guid>
      <description>&lt;p&gt;Perché sarà pur vero che il codice ha l&amp;rsquo;eleganza del verso, può avere un suo ritmo e la sua espressività,&#xA;ma senza una buona documentazione che ne spieghi il funzionamento, difficilmente avrete degli utenti&#xA;soddisfatti.&lt;/p&gt;&#xA;&lt;p&gt;Se mi avessero detto che avrei finito con lo spendere molto più tempo sulla documentazione di un progetto&#xA;che sul codice non ci avrei mai creduto, ma era prima di scoprire la semplice e potente implicazione&#xA;&amp;ldquo;più documentazione, più utenti, più contributor&amp;rdquo;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Full­stack developer with Django and AngularJS</title>
      <link>https://dev.pippi.im/talk/fullstack_angular_django/</link>
      <pubDate>Sat, 26 Apr 2014 15:06:44 +0000</pubDate>
      <guid>https://dev.pippi.im/talk/fullstack_angular_django/</guid>
      <description>&lt;p&gt;Durante il codelab ciascun partecipante vestirà i panni del full-stack developer,  facendosi carico di tutti gli aspetti di un’applicazione web a partire dal backend per arrivare al frontend e curando tutti i dettagli di integrazione.&lt;/p&gt;&#xA;&lt;p&gt;La parte backend verrà sviluppata in linguaggio Python utilizzando Django, noto framework per lo sviluppo di applicazioni web caratterizzato da un ampio set di funzionalità che agevolano lo sviluppo rapido di applicazioni con architettura REST.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Make your Pony fly with Google App Engine</title>
      <link>https://dev.pippi.im/talk/make_your_pony_fly/</link>
      <pubDate>Sat, 16 Nov 2013 15:06:44 +0000</pubDate>
      <guid>https://dev.pippi.im/talk/make_your_pony_fly/</guid>
      <description>&lt;p&gt;Django sta emergendo come framework di riferimento per lo sviluppo di applicazioni web in linguaggio Python; è facile da usare ed offre un set di funzionalità &amp;ldquo;full stack&amp;rdquo; che consente tra le altre cose lo sviluppo rapido di backend con architettura REST.&lt;/p&gt;&#xA;&lt;p&gt;Unite questo alla facilità di deployment di applicazioni web fornita da Google App Engine ed otterrete l&amp;rsquo;arma definitiva per lo sviluppo di servizi web fruibili da piattaforme mobili.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Vintage Web Programming with Python</title>
      <link>https://dev.pippi.im/talk/vintage_web_programming_python/</link>
      <pubDate>Sat, 30 Mar 2013 15:06:44 +0000</pubDate>
      <guid>https://dev.pippi.im/talk/vintage_web_programming_python/</guid>
      <description>&lt;p&gt;Perche sprecare memoria e cicli macchina per produrre ad ogni richiesta dei client le pagine di un sito web?&#xA;Un sito statico e sorprendentemente veloce, parco nei consumi delle risorse macchina e facile da installare&#xA;anche nelle situazioni di web hosting piu` difficili. Mostreremo come un generatore di pagine statiche&#xA;(acrylamid) unito ad uno dei linguaggi di templating html piu potenti sulla piazza (jinja2) possa generare&#xA;siti tecnologicamente all’avanguardia e veloci come nessun framework dinamico potrebbe mai essere.&#xA;Tutto scrivendo pochissimo codice Python!&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
