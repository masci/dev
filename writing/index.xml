<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Writings on /dev/</title>
    <link>http://dev.pippi.im/writing/</link>
    <description>Recent content in Writings on /dev/</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 08 Jun 2017 00:00:00 +0100</lastBuildDate>
    
	<atom:link href="http://dev.pippi.im/writing/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Protobuf parsing in Python</title>
      <link>http://dev.pippi.im/writing/protobuf-python/</link>
      <pubDate>Thu, 08 Jun 2017 00:00:00 +0100</pubDate>
      
      <guid>http://dev.pippi.im/writing/protobuf-python/</guid>
      <description>This blog post was hosted in the Datadog Engineering Blog, you can read it here.</description>
    </item>
    
    <item>
      <title>If code is poetry, then documentation is prose</title>
      <link>http://dev.pippi.im/writing/if-code-is-poetry-then-documentation-is-prose/</link>
      <pubDate>Sat, 24 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://dev.pippi.im/writing/if-code-is-poetry-then-documentation-is-prose/</guid>
      <description>What is poetry? Before starting, let’s agree on some terminology. Obviously poetry is a literary form, a way to write down things I would say, but how do you recognize it, how can you say that is poetry and this is not? Well, according to my literary heritage (I’m italian) something is poetry when it has verse, rhyme and stanza; let’s see what they are and how we can recognize them.</description>
    </item>
    
    <item>
      <title>Uploading files to Google Cloud Storage with Django</title>
      <link>http://dev.pippi.im/writing/django-upload-on-google-cloud-storage/</link>
      <pubDate>Fri, 02 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://dev.pippi.im/writing/django-upload-on-google-cloud-storage/</guid>
      <description>Intro On of the features of Django Appengine Toolkit is simplifying the work needed to configure Google Cloud Storage as a static files storage for Django applications running on Google App Engine. Infact all you have to do is writing something like this in your settings.py module:
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;APPENGINE_TOOLKIT = { &amp;#39;APP_YAML&amp;#39;: os.path.join(BASE_DIR, &amp;#39;app.yaml&amp;#39;), &amp;#39;BUCKET_NAME&amp;#39;: &amp;#39;media-uploads&amp;#39;, } DEFAULT_FILE_STORAGE = &amp;#39;appengine_toolkit.storage.GoogleCloudStorage&amp;#39; STATICFILE_STORAGE = &amp;#39;appengine_toolkit.storage.GoogleCloudStorage&amp;#39; &amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt; A complete example This repo contains a minimalistic Django project implementing a file storage application that lets users upload, listing, retrieve and delete files.</description>
    </item>
    
    <item>
      <title>Create a blog in minutes on App Engine with Django and Cloud Sql</title>
      <link>http://dev.pippi.im/writing/create-a-blog-in-minutes-on-app-engine-with-django/</link>
      <pubDate>Mon, 10 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://dev.pippi.im/writing/create-a-blog-in-minutes-on-app-engine-with-django/</guid>
      <description>Intro Django was actively supported at an early stage of the Python runtime in App Engine SDK through the notable django-nonrel framework, a fork of the original project that adds support for NoSql databases. But starting from the App Engine SDK 1.6.2, released more than two years ago, you can instead deploy Django&amp;rsquo;s official releases and take advantages from the whole stack using Google Cloud Sql.
Case study We&amp;rsquo;re going to setup a minimal project using Zinnia, a blog engine built on top of Django and a fairly complex web application that leverages several components of the framework, a good benchmark for showing how easy can be deploying on App Engine.</description>
    </item>
    
    <item>
      <title>Stop asking users for passwords and let OAuth2 do the job instead</title>
      <link>http://dev.pippi.im/writing/stop-asking-users-for-passwords-and-let-oauth2-do/</link>
      <pubDate>Sun, 10 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://dev.pippi.im/writing/stop-asking-users-for-passwords-and-let-oauth2-do/</guid>
      <description>Who said authentication? If you have an HTTP endpoint which requires authentication, chances are that you&amp;rsquo;re using HTTP Basic auth or Digest. This was the case, you should immediately stop asking users for their passwords - let&amp;rsquo;s see why.
It&amp;rsquo;s not a matter of security per-se, I mean HTTP Basic auth is reasonably fine in many situations where the transmission occurs over SSL and it has some pros: it&amp;rsquo;s easy to implement and it uses the well known HTTP Authorization header, largely supported by almost all the HTTP clients out in the wild.</description>
    </item>
    
    <item>
      <title>Build GitHub like notifications with Django messages and AngularJS</title>
      <link>http://dev.pippi.im/writing/build-github-like-notifications-with-django-messages-and-angular-js/</link>
      <pubDate>Tue, 22 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://dev.pippi.im/writing/build-github-like-notifications-with-django-messages-and-angular-js/</guid>
      <description>Foreword GitHub has a very nice notification system, very similar to a plain old email inbox. You receive a notification which remains unread until you actually read it; then it&amp;rsquo;s archived and removed from your inbox, which it happens could remain empty:
For those who don&amp;rsquo;t know, Django ships a library for displaying &amp;ldquo;one-time&amp;rdquo; messages to the users, it&amp;rsquo;s called Message Framework and you can find it in the contrib package.</description>
    </item>
    
    <item>
      <title>Moving to Jekyll</title>
      <link>http://dev.pippi.im/writing/moving-to-jekyll/</link>
      <pubDate>Sat, 10 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://dev.pippi.im/writing/moving-to-jekyll/</guid>
      <description>I started writing on a personal blog in November, 2006 and I choose a Wordpress instance at wordrpess.com at the time, because it was easy and it was free. My old blog consists of 79 articles in more than six years and considering the most of them are just suggested links or citations, it&amp;rsquo;s not much work in the end. Anyway, I&amp;rsquo;m trying to start this whole thing again so I registered a personal domain to host my stuff and take a look at Wordpress alternatives.</description>
    </item>
    
  </channel>
</rss>